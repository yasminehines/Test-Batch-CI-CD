name: CI

on:
  # schedule:
  #   - cron: "*/2 * * * *"
  # push:
  #   branches:
  #     - dev
  pull_request:
    branches:
      - main

jobs:
  test-example:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run a one-line script
        run: echo "Hello, world!"
  
  # check-UnixScripts:
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Check Unix Scripts Directory
  #     id: CheckUnixScripts
  #     working-directory: /UnixScripts
  #     run: |
  #       pwd
  
  # overwrite-files-part-1:
  #   needs: check-UnixScripts
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Overwrite Files & Directories
  #       id: OverwriteFiles1
  #       if: steps.CheckUnixScripts.outputs.num == 1
  #       run: |
  #         cd ./UnixScripts
  #         git config --global user.email "yasmine.hines@aa.com"
  #         git config --global user.name "yasminehines"
  #         git mv *.ksh /home/runner/work/Test-Batch-CI-CD/Test-Batch-CI-CD/Backup
  #         cd ..
  #         git add ./Backup/
  #         git commit -m "add files to Backup"
  #         git push
  
  # overwrite-files-part-2:
  #   needs: overwrite-files-part-1
  #   runs-on: ubuntu-latest
  #   steps:            
  #     - name: Overwrite Files & Directories Part 2
  #       id: OverwriteFiles2
  #       run: |
  #         cd ./Backup
  #         ls -R
  #         echo "Files and Directories overwritten/moved."
  #         echo '::set-output name=num::0'
  
  # extract-artifacts:
  #   # needs: overwrite-files-part-2
  #   needs: check-UnixScripts
  #   runs-on: ubuntu-latest
  #   steps:
  #     # extract artifacts from dev
  #     - name: Extracts Artifacts
  #       if: steps.CheckUnixScripts.outputs.num == 0 || steps.OverwriteFiles2.outputs.num == 0
  #       # run: |
  #       #   echo "Extracting artifacts from dev" 
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: my-artifact
  #       # path of artifacts from dev
  #         path: ./artifacts
  #         if-no-files-found: warn

  # deploy Unix Scripts
  #   needs: extract-artifacts
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Deploy Unix Scripts
  #       run: |
  
  slackNotification:
    name: Slack Notification
    runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Slack Notification
  #     uses: rtCamp/action-slack-notify@v2
  #     env:
  #       SLACK_CHANNEL: test-githubactions-connection
  #       SLACK_COLOR: ${{ job.status }} # or a specific color like 'green' or '#ff00ff
  #       SLACK_ICON: 'https://github.githubassets.com/images/modules/logos_page/Octocat.png'
  #       SLACK_MESSAGE: 'Test worked! :rocket:'
  #       SLACK_TITLE: Test Slack Notification
  #       SLACK_USERNAME: GitHub_actions_slackbot
  #       SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - uses: 8398a7/action-slack@v3
        with:
          status: custom
          fields: workflow,job,commit,repo,ref,author,took
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : '${{ job.status }}' === 'failure' ? 'danger' : 'warning',
                text: `${process.env.AS_WORKFLOW}\n${process.env.AS_JOB} (${process.env.AS_COMMIT}) of ${process.env.AS_REPO}@${process.env.AS_REF} by ${process.env.AS_AUTHOR} ${{ job.status }} in ${process.env.AS_TOOK}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always() # Pick up events even if the job fails or is canceled.